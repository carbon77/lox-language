program -> declaration* EOF ;
declaration -> varDecl | statement ;
statement -> exprStmt | printStmt | block | ifStmt | whileStmt | forStmt;

forStmt -> "for" "(" ( varDecl | expression | ";" )
    expression? ";"
    expression? ")" statement ;
whileStmt -> "while" "(" expression ")" statement ;
ifStmt -> "if" "(" expression ")" statement ( "else" statement )? ;
block -> "{" declaration* "}" ;
varDecl -> "var" IDENTIFIER ( "=" expression )? ";";
exprStmt -> expression ";" ;
printStmt -> "print" expression ";" ;

expression -> assignment ;
assignment -> IDENTIFIER "=" assignment | logic_or ;
logic_or -> logic_and ( "or" logic_and )* ;
logic_and -> equality ( "and" equality )* ;
equality -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term -> factor ( ( "-" | "+" ) factor )* ;
factor -> unary ( ( "/" | "*" ) unary )* ;
unary -> ( "!" | "-" ) unary | call ;
call -> primary ( "(" arguments? ")" )* ;
arguments -> expression ( "," expression )* ;
primary -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" | IDENTIFIER ;